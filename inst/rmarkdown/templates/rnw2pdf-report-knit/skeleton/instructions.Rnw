%% LyX 2.3.1 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass[11pt,letterpaper,english]{scrartcl}
\usepackage{lmodern}
\renewcommand{\sfdefault}{lmss}
\renewcommand{\ttdefault}{lmtt}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\setlength{\parskip}{\medskipamount}
\setlength{\parindent}{0pt}
\usepackage[active]{srcltx}
\usepackage{babel}
\usepackage{url}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=false,bookmarksopen=false,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}

\makeatletter

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% LyX specific LaTeX commands.
\special{papersize=\the\paperwidth,\the\paperheight}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Textclass specific LaTeX commands.
\providecommand*{\code}[1]{\texttt{#1}}

\@ifundefined{date}{}{\date{}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
% \VignetteIndexEntry{Instructions for rnw2pdf reports with knitted chunks}
% \VignetteEngine{knitr}
% \VignetteBuilder{stationery::rnw2pdf}
% \VignetteEncoding{UTF-8}


\usepackage[includehead,includefoot,
margin=1in,
rmargin=1in,
tmargin=0.75in,
bmargin=1.0in,
headheight=0pt,
headsep=0pt,
marginparwidth=0pt,
footskip=1.5\baselineskip,
]{geometry}

% \usepackage[yyyymmdd,hhmmss]{datetime}

\usepackage{dcolumn}
\usepackage{booktabs}
\usepackage{siunitx} %for semTable
%% PJ 20161110
%% I want to use listings in the document and I want nice/same as knitr.
%% Does knitr provide all of these settings for other listing uses outside
%% weaved part?


\input{theme/reportPreambleHeader.tex}
\input{theme/preambleFooter.tex}
%% Load Hyperref, don't let LyX do this
\input{theme/reportPreambleKnitr.tex}

\makeatother

\usepackage{listings}
\renewcommand{\lstlistingname}{\inputencoding{latin9}Listing}

\begin{document}
%% Fill in values of the arguments here, 
%% If blanks are needed, must insert value " ~ "
%% If comma needed inside value, wrap in {}.
%% Delete secondauthor and thirdauthor if not needed
\reportsetup{%
  author={
    lastname=Johnson,
    firstname=Paul~E., 
    affiliation=Director{,}~CRMDA,
    email=first@ku.edu},
 author={
    lastname=Sullivan, 
    firstname=Meghan, 
    affiliation=CRMDA, 
    email=second@ku.edu},
  title={Instructions for rnw2pdf reports with knitted chunks},
  rightlogo={theme/logo.pdf},
}
\reporthdr

% 1. If you have an address file, use it here:
\input{addressFooter.tex}
% 2. If you don't have an address file, remove % signs and fill in your information
% This stanza must end with "\guideftr"
% (after removing percent signs):
%\urlstyle{tt}
%\footersetup{
%  leftside={
%    lone={Address line 1}, 
%    ltwo={Address line 2}, 
%    lthree={City State Zipcode}},
%  rightside={
%    rone={Web: \url{https://crmda.ku.edu}},
%    rtwo={Email: \href{mailto:you@where.edu}{\url{you@where.edu}}},
%    rthree={Phone: 123-345-5678}}
%}
%\guideftr
% 3. If you don't want an address footer, just delete this subsection.

<<ignoremeRoptions, echo=FALSE>>=
tdir <- "tmpout"
if(!dir.exists(tdir)) dir.create(tdir, showWarnings=FALSE)
library(stationery)
opts.orig <- options()
options(device = pdf)
options(width=60, prompt=" ", continue="  ")
options(useFancyQuotes = FALSE) 
set.seed(12345)
pdf.options(onefile=FALSE, family="Times", pointsize=10)
if(!dir.exists("tmpout"))dir.create("tmpout", recursive = TRUE)
## Code chunk settings
library(knitr)
opts_chunk$set(fig.path='tmpout/t-', split=FALSE, ae=FALSE, comment=NA,
               fig.height=5, fig.width=6)
@

<<ignoremeTexcopy, include=FALSE,echo=FALSE>>=
## You can manually copy your desired "logo.pdf" into the theme folder. 
## Or This will retrieve a logo.pdf file if you want. Note overwrite parameter
try(getFiles("logo.pdf", pkg = "stationery", overwrite = false))
## If you do not have a file after that, 
## the following will manufacture a blank image for a placeholder
if(!file.exists("theme/logo.pdf")){
  blankPDF(file = "theme/logo.pdf", height=1, width=3.5, messg = "")
}
@
\begin{abstract}
\noindent This shows how we use R \cite{RCore} to make report documents
using the CRMDA style. This is a LaTeX ``noweb'' report generated
with the knitr engine.

\tableofcontents{}
\end{abstract}

\section{Introduction}

Create a template (skeleton) document by opening R and running

<<eval=F>>=
library(stationery)
initWriteup("rnw2pdf-report-knit")
@

That will create a folder \code{rnw2pdf-report-knit}. If you do not
want a directory to be created, then instead run

<<eval=F>>=
library(stationery)
initWriteup("rnw2pdf-report-knit", dir = ".")
@

The \code{initWriteup} function will create several files, including
\code{skeleton.\{lyx, Rnw\}}, \code{instructions.\{lyx, Rnw\}},
as well as some auxiliary input files and a theme folder. 

\section{Proceed as follows}

If you allowed \code{initWriteup} to create a directory, rename that
directory in a way that will be helpful to your project. For example,
``homework-1-2019'' (anything that helps you remember what is in
the write-up). 

Decide whether you want to edit the LyX skeleton file (lyx) or the
noweb skeleton (Rnw) file. 
\begin{enumerate}
\item Copy the skeleton file to a new name. Choose a name that helps you,
possibly ``hw-1-2019.lyx'' or such.
\item See the code chunk above named \code{ignoremeTexcopy}. That is used
to retrieve image files for the header on page 1. If you don't have
image logo files that you want to use, the last part of that chunk
will manufacture empty ``blank'' pdf logo files. It is safe to delete
the \code{ignoremeTexcopy} chunk after you have the logo files you
want in the theme folder. 
\item Compile the document without making other changes. For instructions
on compiling, see Section \ref{sec:Compile}.
\item Make revisions incrementally. Start by inserting your own title and
address information. Re-compile often to make sure no errors have
been made. 
\end{enumerate}
Don't make changes that you don't understand in the \code{ignoremeRoptions}
code chunk above. For goodness sake, don't delete that one.

\section{Check our instructions}

With every skeleton, we also provide an instructions file in the working
directory.

There are also several vignettes distributed with the stationery package.
Please review them.
\begin{enumerate}
\item ``stationery'': the package framework overview
\item ``code\_chunks'': discusses display of code in LaTeX documents with
both Sweave and knitr chunks
\item ``Rmarkdown'': about using Markdown with R, an alternative to LaTeX/Noweb.
\item ``HTML Special Features'': In Markdown intended for HTML output,
authors can exploit some features. 
\end{enumerate}

\section{Compile the document\label{sec:Compile}}

The skeleton file is provided in 2 formats, LyX and Rnw. The stationery
vignette has an overview of reasons why one might author with LyX,
or with another program (with the \code{Rnw} file). It also explains
the compilation process. 

Whether one writes the LyX file or the \code{Rnw} file, it is necessary
to understand that compiling is a two step process.
\begin{enumerate}
\item knitting: Run R to do the calculations in the R code chunks and write
out a LaTeX file
\item compiling: Run a LaTeX program, such as \code{pdflatex} or \code{xelatex}
or such. It is also necessary for a bibliography builder program to
make a pass through the data. The aggregator program texi2pdf will
this (if you have it).
\end{enumerate}

\subsection{Working with the LyX file.}
\begin{enumerate}
\item Use the LyX editor. Use the menus in the LyX editor. The file can
be compiled to PDF in LyX, just like any other LyX file. A LyX module
called ``sweave'' can be activated, so that compiling to PDF with
the pdflatex program runs the chunks and builds a PDF. 
\item Run LyX from the command line:

\inputencoding{latin9}\begin{lstlisting}
$ lyx -e pdf2 skeleton.lyx
\end{lstlisting}
\inputencoding{utf8}
\item Open an R session, run

\inputencoding{latin9}\begin{lstlisting}
> library(stationery)
> rnw2pdf("skeleton.lyx") # or .Rnw
\end{lstlisting}
\inputencoding{utf8}
\item The shell script \code{rnw2pdf.sh} is provided with the skeleton.
Run:

\inputencoding{latin9}\begin{lstlisting}
$ ./rnw2pdf.sh skeleton.lyx
\end{lstlisting}
\inputencoding{utf8}
\item In case you want to track the steps of compiling one by one, open
the file in LyX. Use the pull down menu \code{File} $\rightarrow$
\code{Export} $\rightarrow$ \code{Rnw (knitr)}. That will create
a file named ``skeleton.Rnw''. 

This is the equivalent of the command line statement

\inputencoding{latin9}\begin{lstlisting}
$ lyx -e knitr skeleton.lyx
\end{lstlisting}
\inputencoding{utf8}
After that Rnw file is created, proceed as described in the next subsection. 

This two-step process is valuable for debugging. It makes it easier
to spot trouble by focusing on the separate transitions.
\end{enumerate}

\subsection{Working with the Rnw file}

The Rnw file we provide is produced by LyX. It is the traditional
way that the R team developed Sweave and how most vignettes are made
for packages.

The work flow here will vary, depending on your experience and the
editor you choose to use. Here are some possibilities:
\begin{enumerate}
\item You may have a ``noweb'' aware editor. Emacs, Rstudio, and others
have menus that can initiate the work of knitting and rendering the
document.
\item Open an R session and make sure the working directory is the same
as the project writeup.

\inputencoding{latin9}\begin{lstlisting}
> library(stationery)
> rnw2pdf("skeleton.Rnw")
\end{lstlisting}
\inputencoding{utf8}
Additional arguments can be used. Read help for \code{rnw2pdf}. Our
function, by default, will create and R file summary of the command
chunks. This file is referred to as a ``purled'' or ``tangled''
file. 
\item The shell script \code{rnw2pdf.sh} is provided with the skeleton.
Run

\inputencoding{latin9}\begin{lstlisting}
$ ./rnw2pdf.sh --engine='"knitr"' skeleton.Rnw
\end{lstlisting}
\inputencoding{utf8}
The command line script answers to all of the arguments allowed by
the R function \code{rnw2pdf}. The usage is nearly identical. Where
the R function call would be 

\inputencoding{latin9}\begin{lstlisting}
rnw2pdf("skeleton.lyx", engine = "knitr", purl = FALSE, clean = FALSE, verbose = TRUE, keep_tex = TRUE)
\end{lstlisting}
\inputencoding{utf8}
the shell command would be

\inputencoding{latin9}\begin{lstlisting}[style=Rinput]
$ ./rnw2pdf --engine='"knitr"' --purl=FALSE --clean=FALSE --keep_tex=TRUE --verbose=TRUE skeleton.lyx
\end{lstlisting}
\inputencoding{utf8}
The only difference in usage arises when a quoted string must be passed
through, such as ``knitr'', which must be protected in the command
line by single quotes.
\item This is the old fashioned way (therefore most virtuous for senior
R users). 
\begin{enumerate}
\item Step 1:

\inputencoding{latin9}\begin{lstlisting}
$ R CMD knit skeleton.Rnw
\end{lstlisting}
\inputencoding{utf8}
That will create \code{skeleton.tex}. 
\item Step 2:

\inputencoding{latin9}\begin{lstlisting}
$ texi2pdf skeleton.tex
\end{lstlisting}
\inputencoding{utf8}
The major difference between running this and the script we provide
is that our script will handle LyX files and it will, by default,
create a purled copy of the R code. 
\end{enumerate}
\end{enumerate}

\section{Editor Cautions}

\subsection*{Rstudio}

While editing an Rnw file in Rstudio, there will be a button labeled
knit and a small triangle by that item. It is very (VERY!) important
to choose the correct output format. If you choose incorrectly, Rstudio
may damage your document by trying to revise it.

\subsection*{LyX}

The document preamble has manual settings for margins (geometry) as
well as hyperlinks (PDF hyperref). At the current time, these settings
are not integrated with the LyX settings. As a result, using the LyX
pull down menu to revise geometry and PDF hyperrefs may break the
document entirely. To change those features, please edit the document
preamble or config files. Repeat \textbf{CAUTION}: Don't change the
page margins or settings for hyperlinks with pull down menus.

\section{What to edit}

\subsection*{Title and author information}

The first block in the document has the title and author information. 

\subsection*{Footer information}

The footer in this document uses data that is provided in a file named
``addressFooter.tex''. If you don't have an addressFooter.tex file,
the address can be entered directly into this document.

\subsection*{About the theme folder}

The theme folder should will have copies of the theme files, but the
logo files are not copied until the document is compiled for the first
times. It is done that way to preserve the author's customizations.

Authors are free to edit the theme files, to replace logo images.

\section{Math Check}

A linear regression is an estimate of this theoretical model, which
is displayed as a numbered equation
\begin{equation}
y_{i}=\beta_{0}+\beta_{1}x1_{i}+\beta_{2}x2_{i}+\varepsilon_{i}\label{eq:linear}
\end{equation}

The equation can be referred to as equation (\ref{eq:linear}).

\section{Code Chunk Check}

\subsection*{Reports don't include raw code chunks}

What is the difference between a guide and a report? Simply put, a
report document does not reveal source code and it should not distract
the reader with raw output. A report is supposed to be presentable
to a non R user. 

As a result, it is important to think about whether to embed the R
code in the document at all. One might keep the R code in another
file, and use it to generate graphs and tables that can be included
into this report document. 

As we have mentioned in the ``code\_chunks'' vignette, there are
some differences in the way code chunks are used in Sweave and knitr.
These differences are especially important in controlling whether,
and where, the output of code chunks is presented in a document. Of
all of the changes brought by the knitr code chunk engine, the proliferation
of chunk options will be the most noticeable. The author of the knitr
engine, Yihui Xie, maintains the canonical documentation on code chunk
options on his website, \url{https://yihui.name/knitr/options}.

To prevent the code chunks from printing their input and raw output
into the document, the code chunks will often employ flags like \code{include=FALSE},
\code{echo=FALSE}, and \code{results=''hide''}. The code will need
to write the tables and figures into files, and they can be inserted
when it suits the author to do so. 

\subsection*{Pleasant Output Tables}

There are many R packages that generate LaTeX output which is presentable,
close to the final desired result. In the development process, we
will use these nearly-good-enough tables and then, when a final presentation
demands find-grained adjustments, we do so manually on the table files.

<<m1, include=F, results="hide">>=
dat <- data.frame(x = rnorm(100), y = rnorm(100))
m1 <- lm(y ~ x, data = dat)
@

Some examples of nearly-good-enough tables are now presented. The
regression result presented in Table \ref{tab:A-Regression-Table}
may not be perfect by APA standards, but it is certainly good enough
for intermediate versions. This is produced by the \code{outreg()}
function in the rockchalk package. There are, of course, many other
packages designed to generate the same sort of LaTeX markup.

\begin{table}
\caption{A Regression Table\label{tab:A-Regression-Table}}

<<outreg1, echo=F, results='asis'>>=
library(rockchalk)
vl <- c("x" = "Excellent Predictor")
or <- outreg(list("First Model" = m1), varLabels = vl, tight = FALSE, centering = "siunitx")
@
\end{table}
In the kutils package, we made a function \code{semTable()} that
presents structural equation models. The result in Table \ref{tab:A-Confirmatory-Factor}
is an example. 

<<include=F>>=
library(kutils)
require(lavaan)
@

<<cfa1, echo=F, include=F>>=
HS.model <- 'visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9'
output1 <- cfa(HS.model, data = HolzingerSwineford1939, std.lv = TRUE)
@

<<cfa3, echo=F, include=F, results='asis'>>=
cfa1 <- semTable(output1, fits = "rmsea", paramSets = c("loadings", "latentvariances"), type = "latex")
cat(cfa1, file="tmpout/t-cfa3.tex")
@

\begin{table}
\caption{A Confirmatory Factor Analysis Table\label{tab:A-Confirmatory-Factor}}

\input{tmpout/t-cfa3.tex}
\end{table}
In the perfect world, the tables that come from software would be
perfectly presentable. This is the idea of the fully reproducible
research document. At the current time, that is unrealistic. Authors
need to leave a back door though which they can answer the very demanding
requirements of journals and colleagues who insist on tables aligned
``just so'' with labels that have particular styles. The software
will more closely approach that ideal, of course. But, for now, we
make due. 

In R, literate documents (using either knitr or Sweave) can be created
with the document option ``split'' set as TRUE. If this is done,
then an output file is generated for each and every the individual
code chunk. In the CRMDA, our custom is to save these in a directory
called ``tmpout''. The split option is not allowed in documents
prepared as R vignettes, but it is still possible to get the work
done. R has functions, mainly \code{cat}, that can be used to save
output tables.

\section{Session Information}

Leave the code chunks below. Session Information is usually not written
into a report, but an output file is created by the following pieces.

<<session, include=F>>=
zz <- gsub("Rnw", "Rout", knitr::current_input())
capture.output(sessionInfo(), file = zz, append = FALSE)
if (!is.null(warnings())){
    capture.output(warnings(), file = zz, append = TRUE)
}
@

<<RoptionsRestore, echo=F, include=F>>=
## Don't delete this. It puts the interactive session options
## back the way they were. If this is compiled within a session
## it is vital to do this.
options(opts.orig)
@
\end{document}
