%% LyX 2.3.1 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass[11pt,letterpaper,english]{scrartcl}
\usepackage{lmodern}
\renewcommand{\sfdefault}{lmss}
\renewcommand{\ttdefault}{lmtt}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\setlength{\parskip}{\medskipamount}
\setlength{\parindent}{0pt}
\usepackage{babel}
\usepackage[authoryear]{natbib}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=false,bookmarksopen=false,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}

\makeatletter

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% LyX specific LaTeX commands.
\special{papersize=\the\paperwidth,\the\paperheight}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Textclass specific LaTeX commands.
<<echo=F>>=
  if(exists(".orig.enc")) options(encoding = .orig.enc)
@
\newenvironment{lyxcode}
	{\par\begin{list}{}{
		\setlength{\rightmargin}{\leftmargin}
		\setlength{\listparindent}{0pt}% needed for AMS classes
		\raggedright
		\setlength{\itemsep}{0pt}
		\setlength{\parsep}{0pt}
		\normalfont\ttfamily}%
	 \item[]}
	{\end{list}}
\providecommand*{\code}[1]{\texttt{#1}}

\@ifundefined{date}{}{\date{}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
% \VignetteIndexEntry{rnw2pdf-report-sweave}
% \VignetteEngine{Sweave}
% \VignetteBuilder{stationery::rnw2pdf}
% Don't remove next commented line, its needed to fool Sweave
%\usepackage{Sweave}

\usepackage[includehead,includefoot,
lmargin=1in,
rmargin=1in,
tmargin=0.5in,
bmargin=1.0in,
headheight=0pt,
headsep=0pt,
marginparwidth=0pt,
footskip=1.5\baselineskip,
]{geometry}

\usepackage{multicol}
\usepackage{dcolumn}
\usepackage{booktabs}


\input{theme/reportPreambleHeader.tex}
\input{theme/preambleFooter.tex}
%% Load Hyperref, don't let LyX do this
\input{theme/reportPreambleSweavel.tex}

\usepackage{fancyvrb}
\fvset{listparameters={\setlength{\topsep}{0em}}}

\usepackage{siunitx}

\makeatother

\usepackage{listings}
\renewcommand{\lstlistingname}{\inputencoding{latin9}Listing}

\begin{document}
%% Fill in values of the arguments here, 
%% If blanks are needed, must insert value " ~ "
%% If comma needed inside value, wrap in {}.
%% Delete secondauthor and thirdauthor if not needed
\reportsetup{%
  author={
    lastname=Johnson,
    firstname=Paul~E., 
    affiliation=Director{,}~CRMDA,
    email=pauljohn@ku.edu},
  title={Instructions for authoring reports with Sweave code chunks},
  rightlogo={theme/logo.pdf},
}
\reporthdr

% 1. If you have an address file, use it here:
\input{addressFooter.tex}
% 2. If you don't have an address file, remove % signs and fill in your information
% This stanza must end with "\guideftr"
% (after removing percent signs):
%\urlstyle{tt}
%\footersetup{
%  leftside={
%    lone={Address line 1}, 
%    ltwo={Address line 2}, 
%    lthree={City State Zipcode}},
%  rightside={
%    rone={Web: \url{https://crmda.ku.edu}},
%    rtwo={Email: \href{mailto:you@where.edu}{\url{you@where.edu}}},
%    rthree={Phone: 123-345-5678}}
%}
%\guideftr
% 3. If you don't want an address footer, just delete this subsection.

% Please leave this code
<<ignoremeRsetup, echo=FALSE, include=FALSE, results=hide>>=
tdir <- "tmpout"
if(!dir.exists(tdir)) dir.create(tdir, showWarnings=FALSE)
library(stationery)
opts.orig <- options()
options(width=80, prompt=" ", continue="  ")
options(useFancyQuotes = FALSE) 
set.seed(12345)
par.orig <- par(no.readonly=TRUE)
options(SweaveHooks=list(fig=function() par(ps=10)))
pdf.options(onefile=FALSE,family="Times",pointsize=10)
@
%LaTeX in document options
\fvset{listparameters={\setlength{\topsep}{0em}}}
\SweaveOpts{prefix.string=tmpout/t, split=TRUE, ae=FALSE, height=4, width=6}

% This concerns images in your header!
<<ignoremeTexcopy, include=FALSE,echo=FALSE>>=
## Put your desired "logo.pdf" in the theme folder. If
## you don't, you can either use getFiles() to retrieve
## one for you, or let blankPDF() create a blank image
## for you.  Its your choice.
## This will retrieve a logo.pdf file if you want
try(getFiles("logo.pdf", pkg = "stationery", overwrite = FALSE))
## If you do not have a file after that, 
## the following will manufacture a blank image for a placeholder
if(!file.exists("theme/logo.pdf")){
  blankPDF(file = "theme/logo.pdf", height=1, width=3.5, messg = "")
}
@
\begin{abstract}
\noindent This shows how we use R \citep{RCore} to make report documents
using the CRMDA style. This is a LaTeX ``noweb'' report document
using the Sweave code chunk engine.
\end{abstract}

\section{Introduction}

Create a template (skeleton) document by opening R and running

<<eval=F>>=
library(stationery)
initWriteup("rnw2pdf-report-sweave")
@

That will create a folder \code{rnw2pdf-report-sweave}. If you do
not want a directory to be created, then instead run

<<eval=F>>=
library(stationery)
initWriteup("rnw2pdf-report-sweave", dir = ".")
@

The \code{initWriteup} function will create several files, including
\code{skeleton.\{lyx, Rnw\}}, \code{instructions.\{lyx, Rnw\}},
as well as some auxiliary input files and a theme folder. 

\section{Proceed as follows}

If you allowed \code{initWriteup} to create a directory, rename that
directory in a way that will be helpful to your project. For example,
``homework-1-2019'' (anything that helps you remember what is in
the write-up). 

Decide whether you want to edit the LyX skeleton file (lyx) or the
noweb skeleton (Rnw) file. 
\begin{enumerate}
\item Copy the skeleton file to a new name. Choose a name that helps you,
possibly ``hw-1-2019.lyx'' or such.
\item See the code chunk above named \code{ignoremeTexcopy}. That is used
to retrieve image files for the header on page 1. If you don't have
image logo files that you want to use, the last part of that chunk
will manufacture empty ``blank'' pdf logo files. It is safe to delete
the \code{ignoremeTexcopy} chunk after you have the logo files you
want in the theme folder. 
\item Compile the document without making other changes. For instructions
on compiling, see Section \ref{sec:Compile}.
\item Make revisions incrementally. Start by inserting your own title and
address information. Re-compile often to make sure no errors have
been made. 
\end{enumerate}
Don't make changes that you don't understand in the \code{ignoremeRoptions}
code chunk above. For goodness sake, don't delete that one.

\section{Check our instructions}

With every skeleton, we also provide an instructions file in the working
directory.

There are also several vignettes distributed with the stationery package.
Please review them.
\begin{enumerate}
\item ``stationery'': the package framework overview
\item ``code\_chunks'': discusses display of code in LaTeX documents with
both Sweave and knitr chunks
\item ``Rmarkdown'': about using Markdown with R, an alternative to LaTeX/Noweb.
\item ``HTML Special Features'': In Markdown intended for HTML output,
authors can exploit some features. 
\end{enumerate}

\section{Compile the document\label{sec:Compile}}

The skeleton file is provided in 2 formats, LyX and Rnw. The stationery
vignette has an overview of reasons why one might author with LyX,
or with another program (with the \code{Rnw} file). It also explains
the compilation process. 

Whether one writes the LyX file or the \code{Rnw} file, it is necessary
to understand that compiling is a two step process.
\begin{enumerate}
\item knitting: Run R to do the calculations in the R code chunks and write
out a LaTeX file
\item compiling: Run a LaTeX program, such as \code{pdflatex} or \code{xelatex}
or such. It is also necessary for a bibliography builder program to
make a pass through the data. The aggregator program texi2pdf will
this (if you have it).
\end{enumerate}

\subsection{Working with the LyX file.}
\begin{enumerate}
\item Use the LyX editor. Use the menus in the LyX editor. The file can
be compiled to PDF in LyX, just like any other LyX file. A LyX module
called ``sweave'' can be activated, so that compiling to PDF with
the pdflatex program runs the chunks and builds a PDF. 
\item Run LyX from the command line:

\inputencoding{latin9}\begin{lstlisting}
$ lyx -e pdf2 skeleton.lyx
\end{lstlisting}
\inputencoding{utf8}
\item Open an R session, run

\inputencoding{latin9}\begin{lstlisting}
> library(stationery)
> rnw2pdf("skeleton.lyx", engine = "Sweave") # or .Rnw
\end{lstlisting}
\inputencoding{utf8}
\item The shell script \code{rnw2pdf.sh} is provided with the skeleton.
Run:

\inputencoding{latin9}\begin{lstlisting}
$ ./rnw2pdf.sh --engine='"Sweave"' skeleton.lyx
\end{lstlisting}
\inputencoding{utf8}
\item In case you want to track the steps of compiling one by one, open
the file in LyX. Use the pull down menu \code{File} $\rightarrow$
\code{Export} $\rightarrow$ \code{Rnw (knitr)}. That will create
a file named ``skeleton.Rnw''. This is the equivalent of the command
line statement

\inputencoding{latin9}\begin{lstlisting}
$ lyx -e sweave skeleton.lyx
\end{lstlisting}
\inputencoding{utf8}
After that Rnw file is created. Proceed as described in the next subsection.
After that \code{.Rnw} file is created, run

\inputencoding{latin9}\begin{lstlisting}
$ R CMD Sweave skeleton.Rnw
\end{lstlisting}
\inputencoding{utf8}
That creates a LaTeX file and errors are usually easy to diagnose.
This two-step process is valuable for debugging.
\end{enumerate}

\subsection{Working with the Rnw file}

The Rnw file we provide is produced by LyX. It is the traditional
way that the R team developed Sweave and how most vignettes are made
for packages.

The work flow here will vary, depending on your experience and the
editor you choose to use. Here are some possibilities:

Our function, by default, will create and R file summary of the command
chunks. This file is referred to as a ``purled'' or ``tangled''
file. 
\begin{enumerate}
\item In R, run

\inputencoding{latin9}\begin{lstlisting}
> library(stationery)
> rnw2pdf("skeleton.Rnw", engine = "Sweave")
\end{lstlisting}
\inputencoding{utf8}
Additional arguments can be used, mainly to control the verbosity
of the output to preserve intermediate files. Our function, by default,
will create and R file summary of the command chunks. This file is
referred to as a ``purled'' or ``tangled'' file. For debugging,
we use parameters \code{-{}-verbose=FALSE} \code{-{}-clean=FALSE}.
\item The shell script \code{rnw2pdf.sh} is provided with the skeleton.
Run

\inputencoding{latin9}\begin{lstlisting}
$ ./rnw2pdf.sh --engine='"Sweave"' skeleton.Rnw
\end{lstlisting}
\inputencoding{utf8}
The command script answers to all of the arguments followed by the
R function \code{rnw2pdf}. The usage is nearly identical. Where the
R function call would be 

\inputencoding{latin9}\begin{lstlisting}
> rnw2pdf("skeleton.Rnw", purl = FALSE, clean = FALSE, verbose = TRUE, keep_tex = TRUE)
\end{lstlisting}
\inputencoding{utf8}
the shell command would be

\inputencoding{latin9}\begin{lstlisting}
$ ./rnw2pdf -engine='"Sweave"' --purl=FALSE --clean=FALSE --keep_tex=TRUE --verbose=TRUE skeleton.Rnw
\end{lstlisting}
\inputencoding{utf8}
Note the trick to include a parameter \code{\textquotedbl Sweave\textquotedbl}
that is a quoted string. The single quotes that are protecting the
double quotes in the command line.
\item This is the old fashioned way (therefore most virtuous for senior
R users). 
\begin{enumerate}
\item Step 1:

\inputencoding{latin9}\begin{lstlisting}
$ R CMD Sweave skeleton.Rnw
\end{lstlisting}
\inputencoding{utf8}
That will create \code{skeleton.tex}. 
\item Step 2:

\inputencoding{latin9}\begin{lstlisting}
$ texi2pdf skeleton.tex
\end{lstlisting}
\inputencoding{utf8}
The major difference between running this and the script we provide
is that our script will handle LyX files and it will, by default,
create a purled copy of the R code. 
\end{enumerate}
\end{enumerate}

\section{Editor Cautions}

\subsection*{Rstudio}

While editing an Rnw file in Rstudio, there will be a button labeled
knit and a small triangle by that item. It is very (VERY!) important
to choose the correct output format. If you choose incorrectly, Rstudio
may damage your document by trying to revise it.

\subsection*{LyX}

The document preamble has manual settings for margins (geometry) as
well as hyperlinks (PDF hyperref). At the current time, these settings
are not integrated with the LyX settings. As a result, using the LyX
pull down menu to revise geometry and PDF hyperrefs may break the
document entirely. To change those features, please edit the document
preamble or config files. Repeat \textbf{CAUTION}: Don't change the
page margins or settings for hyperlinks with pull down menus.

\section{What to edit}

\subsection*{Title and author information}

The first block in the document has the title and author information. 

\subsection*{Footer information}

The footer in this document uses data that is provided in a file named
``addressFooter.tex''. If you don't have an addressFooter.tex file,
the address can be entered directly into this document.

\subsection*{About the theme folder}

The theme folder should will have copies of the theme files, but the
logo files are not copied until the document is compiled for the first
times. It is done that way to preserve the author's customizations.

Authors are free to edit the theme files, to replace logo images.

\section{Math Check}

A linear regression is an estimate of this theoretical model, which
is displayed as a numbered equation
\begin{equation}
y_{i}=\beta_{0}+\beta_{1}x1_{i}+\beta_{2}x2_{i}+\varepsilon_{i}\label{eq:linear}
\end{equation}

The equation can be referred to as equation (\ref{eq:linear}).

\section{Code Chunk Check}

\subsection*{Reports don't include raw code chunks}

Simply put, a report document does not reveal source code and it should
not distract the reader with raw output. A report is supposed to be
presentable to a non R user. We don't want the report reader to see
ugly output:

<<Rsummary, echo=F>>=
set.seed(234234)
dat <- data.frame(x = rnorm(100), y = rnorm(100))
@

<<tab1a, echo=F>>=
## results hidden to prevent ugly raw output
tab1 <- rockchalk::summarize(dat)
tab1
@

Instead, we want to refer the reader to a numbered table, a LaTeX
floating object. Using a LaTeX cross-references, we refer the reader
to Table \ref{tab:summ}.

<<tab1, echo=F, results=tex>>=
tab1.x <- xtable::xtable(attr(tab1, "numeric.formatted"), caption = "Floating Table with Summary Statistics", label = "tab:summ")
print(tab1.x, caption.placement = "top")
@

As a result, it is important to think about whether to embed the R
code in the document at all. One might keep the R code in another
file, and use it to generate graphs and tables that can be included
into this report document. 

As we have mentioned in the ``code\_chunks'' vignette, there are
some differences in the way code chunks are used in Sweave and knitr.
To prevent the code chunks from printing their input and raw output
into the document, the code chunks will often employ flags like \code{include=FALSE},
\code{echo=FALSE}, and \code{results=hide}. 

\subsection*{Pleasant Output Tables}

There are many R packages that generate LaTeX output which is presentable,
close to the final desired result. In the development process, we
will use these nearly-good-enough tables and then, when a final presentation
demands find-grained adjustments, we do so manually on the table files.

There are several packages in R that can be used to generate LaTeX
tables. Some of them can also create HTML or other formats suitable
for other output document types. Some of the packages that we have
used for these purposes are\code{xtable},\code{Hmisc}, \code{memisc},
\code{texreg}, \code{rockchalk}, \code{kutils}, \code{knitr},
\code{pander}, and others.

<<m1, include=F, results=hide>>=
dat <- data.frame(x = rnorm(100), y = rnorm(100))
m1 <- lm(y ~ x, data = dat)
@

\subsubsection*{Regression tables}

Some examples of nearly-good-enough tables are now presented. The
regression result presented in Table \ref{tab:A-Regression-Table}
may not be perfect by APA standards, but it is certainly good enough
for intermediate versions. This is produced by the \code{outreg()}
function in the rockchalk package. There are many other packages for
creating LaTeX renditions of regression tables. They differ, for the
most part, in the selection of summary statistics presented in the
bottom part of the table.

\begin{table}
\caption{A Regression Table\label{tab:A-Regression-Table}}

<<outreg1, echo=F, results=tex>>=
library(rockchalk)
vl <- c("x" = "Excellent Predictor")
or <- outreg(list("First Model" = m1), varLabels = vl, tight = FALSE, centering = "siunitx")
@
\end{table}

\subsubsection*{Structural equation models}

In the good looking table department, we also need to display structural
equation models. This has been a long term objective in CRMDA. In
the \code{kutils} package, we made a function \code{semTable}. Please
see example output in Table \ref{tab:A-Confirmatory-Factor}. 

<<include=F>>=
library(kutils)
require(lavaan)
@

<<cfa1, echo=F, include=F,results=tex>>=
HS.model <- 'visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9'
output1 <- cfa(HS.model, data = HolzingerSwineford1939, std.lv = TRUE)
cfa1 <- semTable(output1, fits = "rmsea", paramSets = c("loadings", "latentvariances"), type = "latex", print.results = FALSE, centering = "siunitx")
cat(cfa1, file = "tmpout/t-cfa1.tex")
@

\begin{table}
\caption{A Confirmatory Factor Analysis Table\label{tab:A-Confirmatory-Factor}}

\input{tmpout/t-cfa1.tex}
\end{table}
A warning is in order. Some R packages will export a table in using
the \code{longtable} package. We noticed that longtable objects cannot
be included in LaTeX floating tables. Instead, a longtable provides
its own caption and label arguments, and longtable objects will thus
float on their own.

\subsection*{Sweave's split feature}

Sweave has a feature called ``split'', which means that the individual
code chunks, their output, and graphics will be saved into separate
files in an intermediate output folder. In the top of the .Rnw file,
there will be a LaTeX macro:
\begin{lyxcode}
\textbackslash SweaveOpts\{prefix.string=tmpout/t,~split=TRUE,~ae=FALSE,~height=5,~width=6\}
\end{lyxcode}
In our case, the pieces are saved into a folder named ``\code{tmpout}''.
These chunk files will be created while the document is being compiled.
We choose to have the letter ``t'' prepended with each chunk name.

The attraction of splitting the chunks is that the individual pieces
can be used in several ways. First, we may want to keep a document
``clean'' by concentrating the code chunks in a section at the top
of the file, and then insert the results in later sections where desired.
Second, we may need to create a presentation or brief overview document
that uses some of the chunks. If we have a research report and a client
asks for a 10 minute slide show, we might write the slide show and
then integrate a few of the code chunks for the presentation \emph{without
re-running} all of the analysis in the larger report. Third, if tables
created by R need some minor enhancements, we can isolate their files
easily and make manual corrections.

Using \code{split=TRUE} causes a complication in tangling the code
chunks. If we want to generate one R document to accumulate all of
the code, then it is necessary to change \code{split=TRUE} to \code{split=FALSE}
in the document. The function \code{stationery::rnw2pdf} has a sub-routine
that handles that ``smart tangling'' problem, so the author does
not need to change the split setting in the document itself.

Splitting goes against the grain of some advice about reproducible
documents. In the typical documentation, a user is told to type in
a chunk and then the output plops into the document ``right there''.
If the output from the chunk is not perfectly correct, then one ought
to revise the software to fix the chunk output. Theoretically, that
is sound advice. It is simply not practical at the current time. 

Possibly for reasons mentioned in the previous paragraph, the \code{knitr}
code chunk system does not allow splitting. In addition, the R CRAN
archive will not accept package vignettes that use chunk splitting. 

\subsubsection*{If Split is Forbidden}

If policy does not allow splitting code chunks, then one can use R
built-in functions to export text files, such as cat. The \code{xtable}
package includes a function \code{print }that can write into files.
Many regression-table writing packages have a file-export parameter.

If you see nothing in the output document before ``it means'' on
the next line,

<<chunkfig, fig=T, include=F, echo=F, results=hide>>=
x <- rnorm(1000)
hist(x)
@

it means that the chunk is invisible. However, the code chunk does
generate a figure, ``\code{tmpout/t-chunkfig.pdf}''.

To insert that graphic in the document, write a LaTeX statement such
as:

\inputencoding{latin9}\begin{lstlisting}[style=Rinput]
\includegraphics[width=5in]{tmpout/t-chunkfig}
\end{lstlisting}
\inputencoding{utf8}
Note: don't put ``\code{.pdf}'' on the end of the file name, LaTeX
finds the file named ``\code{t-chunkfig.pdf}''. 

If the code makes a LaTeX table that is presentable as is, then we
can include that in the document at the suitable point. 

\subsubsection*{Finally, check the tmp out folder}

After compiling this document, the files we have in the \code{tmpout}
folder are:

<<tmpprint, echo=F>>=
list.files(tdir)
@

We see here one of the reasons why we suggest that all chunks should
have names. It is easier to find them in the output directory if they
have meaningful names.

As we complete this document, we will delete the test document folder
\code{rnw2pdf-report-sweave} at this point, but will leave \code{tmpout}
for user inspection.

<<rnwdirclean, echo=F>>=
unlink("rnw2pdf-report-sweave", recursive = TRUE)
@

\section{Session Information}

Session Information is usually not written into a report, but an output
file is created by the following pieces.

<<session, include=F, results=hide, echo=F>>=
zz <- "instructions.Rout"
capture.output(sessionInfo(), file = zz, append = FALSE)
if (!is.null(warnings())){
    capture.output(warnings(), file = zz, append = TRUE)
}
@

<<RoptionsRestore, echo=F, include=F, results=hide>>=
## Don't delete this. It puts the interactive session options
## back the way they were. If this is compiled within a session
## it is vital to do this.
options(opts.orig)
par(par.orig)
@

\bibliographystyle{apalike2}
\bibliography{R}

\end{document}
